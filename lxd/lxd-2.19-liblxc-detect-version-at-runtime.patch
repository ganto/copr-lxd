commit b216a62a6e2295d9bb8505a4f1201c4480ec9790
Author: Christian Brauner <christian.brauner@ubuntu.com>
Date:   Mon Oct 30 15:32:48 2017 +0100

    liblxc: detect version at runtime
    
    This requires us to link against liblxc.
    
    Closes #3934.

diff --git a/lxd/container_lxc.go b/lxd/container_lxc.go
index fc5ed8c..e16ed01 100644
--- a/lxd/container_lxc.go
+++ b/lxd/container_lxc.go
@@ -1923,7 +1923,7 @@ func (c *containerLXC) startCommon() (string, error) {
 				}
 
 				networkKeyPrefix := "lxc.net"
-				if !lxc.VersionAtLeast(2, 1, 0) {
+				if !shared.RuntimeLiblxcVersionAtLeast(2, 1, 0) {
 					networkKeyPrefix = "lxc.network"
 				}
 
diff --git a/lxd/migrate.go b/lxd/migrate.go
index 555fb07..197d25a 100644
--- a/lxd/migrate.go
+++ b/lxd/migrate.go
@@ -486,7 +486,7 @@ func (s *migrationSourceWs) Do(migrateOp *operation) error {
 			return abort(err)
 		}
 
-		if lxc.VersionAtLeast(2, 0, 4) {
+		if shared.RuntimeLiblxcVersionAtLeast(2, 0, 4) {
 			/* What happens below is slightly convoluted. Due to various
 			 * complications with networking, there's no easy way for criu
 			 * to exit and leave the container in a frozen state for us to
diff --git a/shared/util_linux.go b/shared/util_linux.go
index 78d7829..480240a 100644
--- a/shared/util_linux.go
+++ b/shared/util_linux.go
@@ -11,6 +11,7 @@ import (
 	"os"
 	"path/filepath"
 	"reflect"
+	"strconv"
 	"strings"
 	"sync"
 	"sync/atomic"
@@ -20,7 +21,7 @@ import (
 	"github.com/lxc/lxd/shared/logger"
 )
 
-// #cgo LDFLAGS: -lutil -lpthread
+// #cgo LDFLAGS: -lutil -lpthread -llxc
 /*
 #define _GNU_SOURCE
 #include <errno.h>
@@ -37,6 +38,7 @@ import (
 #include <sys/stat.h>
 #include <sys/types.h>
 #include <sys/un.h>
+#include <lxc/lxccontainer.h>
 
 #ifndef AT_SYMLINK_FOLLOW
 #define AT_SYMLINK_FOLLOW    0x400
@@ -864,3 +866,70 @@ func Statvfs(path string) (*syscall.Statfs_t, error) {
 
 	return &st, nil
 }
+
+func RuntimeLiblxcVersionAtLeast(major int, minor int, micro int) bool {
+	version := C.GoString(C.lxc_get_version())
+	parts := strings.Split(version, ".")
+	partsLen := len(parts)
+	if partsLen == 0 {
+		return false
+	}
+
+	develParts := strings.Split(parts[partsLen-1], "-")
+	if len(develParts) == 2 && develParts[1] == "devel" {
+		return true
+	}
+
+	maj := -1
+	min := -1
+	mic := -1
+
+	for i, v := range parts {
+		num, err := strconv.Atoi(v)
+		if err != nil {
+			return false
+		}
+
+		if i > 2 {
+			return false
+		}
+
+		switch i {
+		case 0:
+			maj = num
+		case 1:
+			min = num
+		case 2:
+			mic = num
+		}
+	}
+
+	/* Major version is greater. */
+	if maj > major {
+		return true
+	}
+
+	if maj < major {
+		return false
+	}
+
+	/* Minor number is greater.*/
+	if min > minor {
+		return true
+	}
+
+	if min < minor {
+		return false
+	}
+
+	/* Patch number is greater. */
+	if mic > micro {
+		return true
+	}
+
+	if mic < micro {
+		return false
+	}
+
+	return true
+}
