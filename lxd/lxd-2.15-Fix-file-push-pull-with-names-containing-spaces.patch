commit 916f33d8843608eade93f4dbde69dd26411bf4a1
Author: Alberto Donato <alberto.donato@canonical.com>
Date:   Mon Jul 3 11:10:52 2017 +0200

    Fix file push/pull with names containing spaces.
    
    Signed-off-by: Alberto Donato <alberto.donato@canonical.com>

diff --git a/client/lxd_containers.go b/client/lxd_containers.go
index c236242..3977fd2 100644
--- a/client/lxd_containers.go
+++ b/client/lxd_containers.go
@@ -474,8 +474,14 @@ func (r *ProtocolLXD) ExecContainer(containerName string, exec api.ContainerExec
 // GetContainerFile retrieves the provided path from the container
 func (r *ProtocolLXD) GetContainerFile(containerName string, path string) (io.ReadCloser, *ContainerFileResponse, error) {
 	// Prepare the HTTP request
-	url := fmt.Sprintf("%s/1.0/containers/%s/files?path=%s", r.httpHost, containerName, path)
-	req, err := http.NewRequest("GET", url, nil)
+	requestURL, err := shared.URLEncode(
+		fmt.Sprintf("%s/1.0/containers/%s/files", r.httpHost, containerName),
+		map[string]string{"path": path})
+	if err != nil {
+		return nil, nil, err
+	}
+
+	req, err := http.NewRequest("GET", requestURL, nil)
 	if err != nil {
 		return nil, nil, err
 	}
@@ -548,8 +554,13 @@ func (r *ProtocolLXD) CreateContainerFile(containerName string, path string, arg
 	}
 
 	// Prepare the HTTP request
-	url := fmt.Sprintf("%s/1.0/containers/%s/files?path=%s", r.httpHost, containerName, path)
-	req, err := http.NewRequest("POST", url, args.Content)
+	requestURL, err := shared.URLEncode(
+		fmt.Sprintf("%s/1.0/containers/%s/files", r.httpHost, containerName),
+		map[string]string{"path": path})
+	if err != nil {
+		return err
+	}
+	req, err := http.NewRequest("POST", requestURL, args.Content)
 	if err != nil {
 		return err
 	}
diff --git a/shared/util.go b/shared/util.go
index 43cba25..2164814 100644
--- a/shared/util.go
+++ b/shared/util.go
@@ -12,6 +12,7 @@ import (
 	"io/ioutil"
 	"math"
 	"net/http"
+	"net/url"
 	"os"
 	"os/exec"
 	"path"
@@ -28,6 +29,21 @@ import (
 const SnapshotDelimiter = "/"
 const DefaultPort = "8443"
 
+// URLEncode encodes a path and query parameters to a URL.
+func URLEncode(path string, query map[string]string) (string, error) {
+	u, err := url.Parse(path)
+	if err != nil {
+		return "", err
+	}
+
+	params := url.Values{}
+	for key, value := range query {
+		params.Add(key, value)
+	}
+	u.RawQuery = params.Encode()
+	return u.String(), nil
+}
+
 // AddSlash adds a slash to the end of paths if they don't already have one.
 // This can be useful for rsyncing things, since rsync has behavior present on
 // the presence or absence of a trailing slash.
diff --git a/shared/util_test.go b/shared/util_test.go
index 458c8fc..3315737 100644
--- a/shared/util_test.go
+++ b/shared/util_test.go
@@ -9,6 +9,16 @@ import (
 	"testing"
 )
 
+func TestURLEncode(t *testing.T) {
+	url, _ := URLEncode(
+		"/path/with spaces",
+		map[string]string{"param": "with spaces", "other": "without"})
+	expected := "/path/with%20spaces?other=without&param=with+spaces"
+	if url != expected {
+		t.Error(fmt.Errorf("'%s' != '%s'", url, expected))
+	}
+}
+
 func TestFileCopy(t *testing.T) {
 	helloWorld := []byte("hello world\n")
 	source, err := ioutil.TempFile("", "")
