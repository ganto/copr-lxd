From 1cf3cc1f13a488cefe609532d57e581f7afe8573 Mon Sep 17 00:00:00 2001
From: Christian Brauner <christian.brauner@ubuntu.com>
Date: Thu, 8 Jun 2017 22:21:55 +0200
Subject: storage: {copy,move} bugfixes

Signed-off-by: Christian Brauner <christian.brauner@ubuntu.com>
---
 lxd/migrate.go           |  2 +-
 lxd/storage_btrfs.go     | 22 ++++++++++++----------
 lxd/storage_migration.go | 33 ++++++++++++++++++---------------
 lxd/storage_zfs.go       | 27 ++++++++++++++++-----------
 4 files changed, 47 insertions(+), 37 deletions(-)

diff --git a/lxd/migrate.go b/lxd/migrate.go
index 5fa7d1db..244ee1d7 100644
--- a/lxd/migrate.go
+++ b/lxd/migrate.go
@@ -401,7 +401,7 @@ func (s *migrationSourceWs) Do(migrateOp *operation) error {
 		return err
 	}
 
-	err = driver.SendWhileRunning(s.fsConn, migrateOp, bwlimit)
+	err = driver.SendWhileRunning(s.fsConn, migrateOp, bwlimit, s.containerOnly)
 	if err != nil {
 		return abort(err)
 	}
diff --git a/lxd/storage_btrfs.go b/lxd/storage_btrfs.go
index a2956971..a4ea3997 100644
--- a/lxd/storage_btrfs.go
+++ b/lxd/storage_btrfs.go
@@ -1767,7 +1767,7 @@ func (s *btrfsMigrationSourceDriver) send(conn *websocket.Conn, btrfsPath string
 	return err
 }
 
-func (s *btrfsMigrationSourceDriver) SendWhileRunning(conn *websocket.Conn, op *operation, bwlimit string) error {
+func (s *btrfsMigrationSourceDriver) SendWhileRunning(conn *websocket.Conn, op *operation, bwlimit string, containerOnly bool) error {
 	_, containerPool := s.container.Storage().GetContainerPoolInfo()
 	containerName := s.container.Name()
 	containersPath := getContainerMountPoint(containerPool, "")
@@ -1803,16 +1803,18 @@ func (s *btrfsMigrationSourceDriver) SendWhileRunning(conn *websocket.Conn, op *
 		return s.send(conn, migrationSendSnapshot, "", wrapper)
 	}
 
-	for i, snap := range s.snapshots {
-		prev := ""
-		if i > 0 {
-			prev = getSnapshotMountPoint(containerPool, s.snapshots[i-1].Name())
-		}
+	if !containerOnly {
+		for i, snap := range s.snapshots {
+			prev := ""
+			if i > 0 {
+				prev = getSnapshotMountPoint(containerPool, s.snapshots[i-1].Name())
+			}
 
-		snapMntPoint := getSnapshotMountPoint(containerPool, snap.Name())
-		wrapper := StorageProgressReader(op, "fs_progress", snap.Name())
-		if err := s.send(conn, snapMntPoint, prev, wrapper); err != nil {
-			return err
+			snapMntPoint := getSnapshotMountPoint(containerPool, snap.Name())
+			wrapper := StorageProgressReader(op, "fs_progress", snap.Name())
+			if err := s.send(conn, snapMntPoint, prev, wrapper); err != nil {
+				return err
+			}
 		}
 	}
 
diff --git a/lxd/storage_migration.go b/lxd/storage_migration.go
index 4f1e095c..c49f2b37 100644
--- a/lxd/storage_migration.go
+++ b/lxd/storage_migration.go
@@ -18,7 +18,7 @@ type MigrationStorageSourceDriver interface {
 	/* send any bits of the container/snapshots that are possible while the
 	 * container is still running.
 	 */
-	SendWhileRunning(conn *websocket.Conn, op *operation, bwlimit string) error
+	SendWhileRunning(conn *websocket.Conn, op *operation, bwlimit string, containerOnly bool) error
 
 	/* send the final bits (e.g. a final delta snapshot for zfs, btrfs, or
 	 * do a final rsync) of the fs after the container has been
@@ -42,22 +42,25 @@ func (s rsyncStorageSourceDriver) Snapshots() []container {
 	return s.snapshots
 }
 
-func (s rsyncStorageSourceDriver) SendWhileRunning(conn *websocket.Conn, op *operation, bwlimit string) error {
+func (s rsyncStorageSourceDriver) SendWhileRunning(conn *websocket.Conn, op *operation, bwlimit string, containerOnly bool) error {
 	ctName, _, _ := containerGetParentAndSnapshotName(s.container.Name())
-	for _, send := range s.snapshots {
-		ourStart, err := send.StorageStart()
-		if err != nil {
-			return err
-		}
-		if ourStart {
-			defer send.StorageStop()
-		}
 
-		path := send.Path()
-		wrapper := StorageProgressReader(op, "fs_progress", send.Name())
-		err = RsyncSend(ctName, shared.AddSlash(path), conn, wrapper, bwlimit)
-		if err != nil {
-			return err
+	if !containerOnly {
+		for _, send := range s.snapshots {
+			ourStart, err := send.StorageStart()
+			if err != nil {
+				return err
+			}
+			if ourStart {
+				defer send.StorageStop()
+			}
+
+			path := send.Path()
+			wrapper := StorageProgressReader(op, "fs_progress", send.Name())
+			err = RsyncSend(ctName, shared.AddSlash(path), conn, wrapper, bwlimit)
+			if err != nil {
+				return err
+			}
 		}
 	}
 
diff --git a/lxd/storage_zfs.go b/lxd/storage_zfs.go
index dbe42152..dea7044f 100644
--- a/lxd/storage_zfs.go
+++ b/lxd/storage_zfs.go
@@ -2510,7 +2510,7 @@ func (s *zfsMigrationSourceDriver) send(conn *websocket.Conn, zfsName string, zf
 	return err
 }
 
-func (s *zfsMigrationSourceDriver) SendWhileRunning(conn *websocket.Conn, op *operation, bwlimit string) error {
+func (s *zfsMigrationSourceDriver) SendWhileRunning(conn *websocket.Conn, op *operation, bwlimit string, containerOnly bool) error {
 	if s.container.IsSnapshot() {
 		_, snapOnlyName, _ := containerGetParentAndSnapshotName(s.container.Name())
 		snapshotName := fmt.Sprintf("snapshot-%s", snapOnlyName)
@@ -2519,18 +2519,19 @@ func (s *zfsMigrationSourceDriver) SendWhileRunning(conn *websocket.Conn, op *op
 	}
 
 	lastSnap := ""
+	if !containerOnly {
+		for i, snap := range s.zfsSnapshotNames {
+			prev := ""
+			if i > 0 {
+				prev = s.zfsSnapshotNames[i-1]
+			}
 
-	for i, snap := range s.zfsSnapshotNames {
-		prev := ""
-		if i > 0 {
-			prev = s.zfsSnapshotNames[i-1]
-		}
-
-		lastSnap = snap
+			lastSnap = snap
 
-		wrapper := StorageProgressReader(op, "fs_progress", snap)
-		if err := s.send(conn, snap, prev, wrapper); err != nil {
-			return err
+			wrapper := StorageProgressReader(op, "fs_progress", snap)
+			if err := s.send(conn, snap, prev, wrapper); err != nil {
+				return err
+			}
 		}
 	}
 
@@ -2593,6 +2594,10 @@ func (s *storageZfs) MigrationSource(ct container, containerOnly bool) (Migratio
 		zfs:              s,
 	}
 
+	if containerOnly {
+		return &driver, nil
+	}
+
 	/* List all the snapshots in order of reverse creation. The idea here
 	* is that we send the oldest to newest snapshot, hopefully saving on
 	* xfer costs. Then, after all that, we send the container itself.
