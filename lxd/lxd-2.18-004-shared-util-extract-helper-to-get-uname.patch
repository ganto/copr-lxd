commit fc6528884afba76fb96043f376d58f4f0271e991
Author: Alberto Donato <alberto.donato@canonical.com>
Date:   Wed Sep 20 15:18:06 2017 +0200

    shared/util: extract helper to get uname
    
    Signed-off-by: Alberto Donato <alberto.donato@canonical.com>

diff --git a/lxd/api_1.0.go b/lxd/api_1.0.go
index 7b68acd..0dd41bf 100644
--- a/lxd/api_1.0.go
+++ b/lxd/api_1.0.go
@@ -6,7 +6,6 @@ import (
 	"net/http"
 	"os"
 	"reflect"
-	"syscall"
 
 	"gopkg.in/lxc/go-lxc.v2"
 
@@ -140,42 +139,11 @@ func api10Get(d *Daemon, r *http.Request) Response {
 
 	srv.Auth = "trusted"
 
-	/*
-	 * Based on: https://groups.google.com/forum/#!topic/golang-nuts/Jel8Bb-YwX8
-	 * there is really no better way to do this, which is
-	 * unfortunate. Also, we ditch the more accepted CharsToString
-	 * version in that thread, since it doesn't seem as portable,
-	 * viz. github issue #206.
-	 */
-	uname := syscall.Utsname{}
-	if err := syscall.Uname(&uname); err != nil {
+	uname, err := shared.Uname()
+	if err != nil {
 		return InternalError(err)
 	}
 
-	kernel := ""
-	for _, c := range uname.Sysname {
-		if c == 0 {
-			break
-		}
-		kernel += string(byte(c))
-	}
-
-	kernelVersion := ""
-	for _, c := range uname.Release {
-		if c == 0 {
-			break
-		}
-		kernelVersion += string(byte(c))
-	}
-
-	kernelArchitecture := ""
-	for _, c := range uname.Machine {
-		if c == 0 {
-			break
-		}
-		kernelArchitecture += string(byte(c))
-	}
-
 	addresses, err := util.ListenAddresses(daemonConfig["core.https_address"].Get())
 	if err != nil {
 		return InternalError(err)
@@ -208,9 +176,9 @@ func api10Get(d *Daemon, r *http.Request) Response {
 		CertificateFingerprint: certificateFingerprint,
 		Driver:                 "lxc",
 		DriverVersion:          lxc.Version(),
-		Kernel:                 kernel,
-		KernelArchitecture:     kernelArchitecture,
-		KernelVersion:          kernelVersion,
+		Kernel:                 uname.Sysname,
+		KernelArchitecture:     uname.Machine,
+		KernelVersion:          uname.Release,
 		Server:                 "lxd",
 		ServerPid:              os.Getpid(),
 		ServerVersion:          version.Version}
diff --git a/shared/osarch/architectures_linux.go b/shared/osarch/architectures_linux.go
index c95b58a..a87e795 100644
--- a/shared/osarch/architectures_linux.go
+++ b/shared/osarch/architectures_linux.go
@@ -3,22 +3,15 @@
 package osarch
 
 import (
-	"syscall"
+	"github.com/lxc/lxd/shared"
 )
 
+// ArchitectureGetLocal returns the local hardware architecture
 func ArchitectureGetLocal() (string, error) {
-	uname := syscall.Utsname{}
-	if err := syscall.Uname(&uname); err != nil {
+	uname, err := shared.Uname()
+	if err != nil {
 		return ArchitectureDefault, err
 	}
 
-	architectureName := ""
-	for _, c := range uname.Machine {
-		if c == 0 {
-			break
-		}
-		architectureName += string(byte(c))
-	}
-
-	return architectureName, nil
+	return uname.Machine, nil
 }
diff --git a/shared/util_linux.go b/shared/util_linux.go
index 77daf10..369898e 100644
--- a/shared/util_linux.go
+++ b/shared/util_linux.go
@@ -769,3 +769,51 @@ func GetErrno(err error) (errno error, iserrno bool) {
 
 	return nil, false
 }
+
+// Utsname returns the same info as syscall.Utsname, as strings
+type Utsname struct {
+	Sysname    string
+	Nodename   string
+	Release    string
+	Version    string
+	Machine    string
+	Domainname string
+}
+
+// Uname returns Utsname as strings
+func Uname() (*Utsname, error) {
+	/*
+	 * Based on: https://groups.google.com/forum/#!topic/golang-nuts/Jel8Bb-YwX8
+	 * there is really no better way to do this, which is
+	 * unfortunate. Also, we ditch the more accepted CharsToString
+	 * version in that thread, since it doesn't seem as portable,
+	 * viz. github issue #206.
+	 */
+
+	uname := syscall.Utsname{}
+	err := syscall.Uname(&uname)
+	if err != nil {
+		return nil, err
+	}
+
+	return &Utsname{
+		Sysname:    intArrayToString(uname.Sysname),
+		Nodename:   intArrayToString(uname.Nodename),
+		Release:    intArrayToString(uname.Release),
+		Version:    intArrayToString(uname.Version),
+		Machine:    intArrayToString(uname.Machine),
+		Domainname: intArrayToString(uname.Domainname),
+	}, nil
+}
+
+func intArrayToString(arr [65]int8) string {
+	s := ""
+	for _, c := range arr {
+		if c == 0 {
+			break
+		}
+		s += string(byte(c))
+	}
+
+	return s
+}
