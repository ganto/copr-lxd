commit 326d6efb327a7a9c516fe1313d69f5d39f12b164
Author: Stéphane Graber <stgraber@ubuntu.com>
Date:   Fri Jun 30 17:02:21 2017 -0400

    client: Commonize error handling
    
    Some functions that were doing direct HTTP queries weren't using the
    centralized error handling and would lead to low level errors being
    reported to the user rather than the more useful higher level errors.
    
    Signed-off-by: Stéphane Graber <stgraber@ubuntu.com>

diff --git a/client/lxd.go b/client/lxd.go
index 742ad2f..a6e0713 100644
--- a/client/lxd.go
+++ b/client/lxd.go
@@ -74,6 +74,32 @@ func (r *ProtocolLXD) RawWebsocket(path string) (*websocket.Conn, error) {
 }
 
 // Internal functions
+func (r *ProtocolLXD) parseResponse(resp *http.Response) (*api.Response, string, error) {
+	// Get the ETag
+	etag := resp.Header.Get("ETag")
+
+	// Decode the response
+	decoder := json.NewDecoder(resp.Body)
+	response := api.Response{}
+
+	err := decoder.Decode(&response)
+	if err != nil {
+		// Check the return value for a cleaner error
+		if resp.StatusCode != http.StatusOK {
+			return nil, "", fmt.Errorf("Failed to fetch %s: %s", resp.Request.URL.String(), resp.Status)
+		}
+
+		return nil, "", err
+	}
+
+	// Handle errors
+	if response.Type == api.ErrorResponse {
+		return nil, "", fmt.Errorf(response.Error)
+	}
+
+	return &response, etag, nil
+}
+
 func (r *ProtocolLXD) rawQuery(method string, url string, data interface{}, ETag string) (*api.Response, string, error) {
 	var req *http.Request
 	var err error
@@ -130,29 +156,7 @@ func (r *ProtocolLXD) rawQuery(method string, url string, data interface{}, ETag
 	}
 	defer resp.Body.Close()
 
-	// Get the ETag
-	etag := resp.Header.Get("ETag")
-
-	// Decode the response
-	decoder := json.NewDecoder(resp.Body)
-	response := api.Response{}
-
-	err = decoder.Decode(&response)
-	if err != nil {
-		// Check the return value for a cleaner error
-		if resp.StatusCode != http.StatusOK {
-			return nil, "", fmt.Errorf("Failed to fetch %s: %s", url, resp.Status)
-		}
-
-		return nil, "", err
-	}
-
-	// Handle errors
-	if response.Type == api.ErrorResponse {
-		return nil, "", fmt.Errorf(response.Error)
-	}
-
-	return &response, etag, nil
+	return r.parseResponse(resp)
 }
 
 func (r *ProtocolLXD) query(method string, path string, data interface{}, ETag string) (*api.Response, string, error) {
diff --git a/client/lxd_containers.go b/client/lxd_containers.go
index c378691..e8d03a1 100644
--- a/client/lxd_containers.go
+++ b/client/lxd_containers.go
@@ -490,7 +490,10 @@ func (r *ProtocolLXD) GetContainerFile(containerName string, path string) (io.Re
 
 	// Check the return value for a cleaner error
 	if resp.StatusCode != http.StatusOK {
-		return nil, nil, fmt.Errorf("Failed to fetch %s: %s", url, resp.Status)
+		_, _, err := r.parseResponse(resp)
+		if err != nil {
+			return nil, nil, err
+		}
 	}
 
 	// Parse the headers
@@ -581,8 +584,9 @@ func (r *ProtocolLXD) CreateContainerFile(containerName string, path string, arg
 	}
 
 	// Check the return value for a cleaner error
-	if resp.StatusCode != http.StatusOK {
-		return fmt.Errorf("Failed to upload to %s: %s", url, resp.Status)
+	_, _, err = r.parseResponse(resp)
+	if err != nil {
+		return err
 	}
 
 	return nil
@@ -856,7 +860,10 @@ func (r *ProtocolLXD) GetContainerLogfile(name string, filename string) (io.Read
 
 	// Check the return value for a cleaner error
 	if resp.StatusCode != http.StatusOK {
-		return nil, fmt.Errorf("Failed to fetch %s: %s", url, resp.Status)
+		_, _, err := r.parseResponse(resp)
+		if err != nil {
+			return nil, err
+		}
 	}
 
 	return resp.Body, err
diff --git a/client/lxd_images.go b/client/lxd_images.go
index edc7a45..e17b1d2 100644
--- a/client/lxd_images.go
+++ b/client/lxd_images.go
@@ -2,7 +2,6 @@ package lxd
 
 import (
 	"crypto/sha256"
-	"encoding/json"
 	"fmt"
 	"io"
 	"io/ioutil"
@@ -125,7 +124,10 @@ func (r *ProtocolLXD) GetPrivateImageFile(fingerprint string, secret string, req
 	defer response.Body.Close()
 
 	if response.StatusCode != http.StatusOK {
-		return nil, fmt.Errorf("Unable to fetch %s: %s", url, response.Status)
+		_, _, err := r.parseResponse(response)
+		if err != nil {
+			return nil, err
+		}
 	}
 
 	ctype, ctypeParams, err := mime.ParseMediaType(response.Header.Get("Content-Type"))
@@ -406,25 +408,12 @@ func (r *ProtocolLXD) CreateImage(image api.ImagesPost, args *ImageCreateArgs) (
 	}
 	defer resp.Body.Close()
 
-	// Decode the response
-	decoder := json.NewDecoder(resp.Body)
-	response := api.Response{}
-
-	err = decoder.Decode(&response)
+	// Handle errors
+	response, _, err := r.parseResponse(resp)
 	if err != nil {
-		// Check the return value for a cleaner error
-		if resp.StatusCode != http.StatusOK {
-			return nil, fmt.Errorf("Failed to fetch %s: %s", reqURL, resp.Status)
-		}
-
 		return nil, err
 	}
 
-	// Handle errors
-	if response.Type == api.ErrorResponse {
-		return nil, fmt.Errorf(response.Error)
-	}
-
 	// Get to the operation
 	respOperation, err := response.MetadataAsOperation()
 	if err != nil {
