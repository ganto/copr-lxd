commit d62f854e826a47c48abc275d9fc560bdceff92e2
Author: Stéphane Graber <stgraber@ubuntu.com>
Date:   Sun Jul 2 18:14:10 2017 -0400

    Better handle errors in memory reporting
    
    Closes #3482
    
    Signed-off-by: Stéphane Graber <stgraber@ubuntu.com>

diff --git a/lxd/container_lxc.go b/lxd/container_lxc.go
index 3e10418..2e57410 100644
--- a/lxd/container_lxc.go
+++ b/lxd/container_lxc.go
@@ -4980,39 +4980,36 @@ func (c *containerLXC) memoryState() api.ContainerStateMemory {
 
 	// Memory in bytes
 	value, err := c.CGroupGet("memory.usage_in_bytes")
-	valueInt, err := strconv.ParseInt(value, 10, 64)
-	if err != nil {
-		valueInt = -1
+	valueInt, err1 := strconv.ParseInt(value, 10, 64)
+	if err == nil && err1 == nil {
+		memory.Usage = valueInt
 	}
-	memory.Usage = valueInt
 
 	// Memory peak in bytes
 	value, err = c.CGroupGet("memory.max_usage_in_bytes")
-	valueInt, err = strconv.ParseInt(value, 10, 64)
-	if err != nil {
-		valueInt = -1
+	valueInt, err1 = strconv.ParseInt(value, 10, 64)
+	if err == nil && err1 == nil {
+		memory.UsagePeak = valueInt
 	}
 
-	memory.UsagePeak = valueInt
-
 	if cgSwapAccounting {
 		// Swap in bytes
-		value, err := c.CGroupGet("memory.memsw.usage_in_bytes")
-		valueInt, err := strconv.ParseInt(value, 10, 64)
-		if err != nil {
-			valueInt = -1
+		if memory.Usage > 0 {
+			value, err := c.CGroupGet("memory.memsw.usage_in_bytes")
+			valueInt, err1 := strconv.ParseInt(value, 10, 64)
+			if err == nil && err1 == nil {
+				memory.SwapUsage = valueInt - memory.Usage
+			}
 		}
 
-		memory.SwapUsage = valueInt - memory.Usage
-
 		// Swap peak in bytes
-		value, err = c.CGroupGet("memory.memsw.max_usage_in_bytes")
-		valueInt, err = strconv.ParseInt(value, 10, 64)
-		if err != nil {
-			valueInt = -1
+		if memory.UsagePeak > 0 {
+			value, err = c.CGroupGet("memory.memsw.max_usage_in_bytes")
+			valueInt, err1 = strconv.ParseInt(value, 10, 64)
+			if err == nil && err1 == nil {
+				memory.SwapUsagePeak = valueInt - memory.UsagePeak
+			}
 		}
-
-		memory.SwapUsagePeak = valueInt - memory.UsagePeak
 	}
 
 	return memory
